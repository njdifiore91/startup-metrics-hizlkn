name: Development Deployment

on:
  push:
    branches: [develop]
  workflow_run:
    workflows: [Continuous Integration]
    branches: [develop]
    types: [completed]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECS_CLUSTER: startup-metrics-dev
  BACKEND_SERVICE: backend-service-dev
  FRONTEND_SERVICE: frontend-service-dev

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    needs: [ci-checks]
    environment: development
    defaults:
      run:
        working-directory: src/backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 1200
          role-session-name: GithubActionsDeployment

      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Build and push backend image
        uses: docker/build-push-action@v3
        with:
          context: ./src/backend
          file: ./src/backend/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/startup-metrics-backend:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/startup-metrics-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            API_URL=${{ secrets.API_URL }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          scan: true
          sbom: true

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.BACKEND_SERVICE }} \
            --force-new-deployment \
            --enable-execute-command \
            --health-check-grace-period-seconds 60

      - name: Monitor deployment
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.BACKEND_SERVICE }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [ci-checks]
    environment: development
    defaults:
      run:
        working-directory: src/web

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 1200
          role-session-name: GithubActionsDeployment

      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Build and push frontend image
        uses: docker/build-push-action@v3
        with:
          context: ./src/web
          file: ./src/web/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/startup-metrics-frontend:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/startup-metrics-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            API_URL=${{ secrets.API_URL }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          scan: true
          sbom: true

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.FRONTEND_SERVICE }} \
            --force-new-deployment \
            --enable-execute-command \
            --health-check-grace-period-seconds 60

      - name: Monitor deployment
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.FRONTEND_SERVICE }}

      - name: Configure CloudWatch alarms
        run: |
          aws cloudwatch put-metric-alarm \
            --alarm-name "${FRONTEND_SERVICE}-health" \
            --alarm-description "Alarm for frontend service health in development" \
            --metric-name HealthyHostCount \
            --namespace AWS/ApplicationELB \
            --statistic Average \
            --period 60 \
            --threshold 1 \
            --comparison-operator LessThanThreshold \
            --evaluation-periods 2 \
            --alarm-actions arn:aws:sns:${AWS_REGION}:${AWS_ACCOUNT_ID}:deployment-alerts-dev